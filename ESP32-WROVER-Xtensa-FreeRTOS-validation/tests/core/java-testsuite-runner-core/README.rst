MicroEJ Core Validation
=======================

Overview
--------

This project contains test cases aimed at validating the correct runtime execution 
of a MicroEJ Platform connected to a Board Support Package (BSP).
 
Tests are written as JUnit test cases, thus the main entry point is automatically generated by MicroEJ SDK.

Tests can be launched:

-  as a standard Application by using a local launcher.
-  as a Platform Test Suite by building the module.

Requirements
------------

-  MicroEJ SDK version ``5.1.0`` (included in MicroEJ SDK dist. ``19.05``).
-  MicroEJ Platform built from a MicroEJ Architecture version ``7.0.0`` or higher.
-  See Platform Test Suites `documentation <../../README.rst>`_.

Usage
-----

Launcher Mode
~~~~~~~~~~~~~

In MicroEJ SDK,

-  Select ``Run > Run Configurations...``. A launcher named
   ``java-testsuite-runner-core`` should be available under
   ``MicroEJ Application``.
   
-  In ``Execution`` tab, select the target MicroEJ Platform.

-  Click on ``Run`` button to compile the MicroEJ Application.

-  Before linking the application against the MicroEJ Platform, add the
   following code in your BSP to test the FPU configuration:

.. code:: c

   #include "sni.h"
   jfloat Java_com_microej_core_tests_MicroejCoreValidation_testFloat (jfloat a, jfloat b) {return a * b;}
   jdouble Java_com_microej_core_tests_MicroejCoreValidation_testDouble (jdouble a, jdouble b) {return a * b;}

-  For a best result in the Java Round Robin test, disable all the C
   native tasks except the MicroEJ task.

-  Link the BSP project with the MicroEJ Application (``microejapp.o``), 
   the MicroEJ Platform runtime (``microejruntime.a``) and the MicroEJ Platform header files (``*.h``).

-  Once all the tests have passed successfully, MicroEJ Core is validated.

-  See below for an output example of a successful validation.

::

   VM START
   *****************************************************************************************************
   *                                  MicroEJ Core Validation - 3.1.0                                  *
   *****************************************************************************************************
   * Copyright 2013-2022 MicroEJ Corp. All rights reserved.                                            *
   * Use of this source code is governed by a BSD-style license that can be found with this software.  *
   *****************************************************************************************************
   
   -> Check visible clock (LLMJVM_IMPL_getCurrentTime validation)...
   Property 'com.microej.core.tests.clock.seconds' is not set (default to '10' seconds)
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   OK: testVisibleClock
   -> Check schedule request and wakeup (LLMJVM_IMPL_scheduleRequest and LLMJVM_IMPL_wakeupVM validation)...
   Waiting for 5s...
   ...done
   OK: testTime
   -> Check monotonic time (LLMJVM_IMPL_getCurrentTime, LLMJVM_IMPL_setApplicationTime validation)...
   Waiting for 5s...
   ...done
   OK: testMonotonicTime
   -> Check Java round robin (LLMJVM_IMPL_scheduleRequest validation)...
   For a best result, please disable all the C native tasks except the MicroEJ task.
   Task 3 is waiting for start...
   Task 2 is waiting for start...
   Task 1 is waiting for start...
   Task 0 is waiting for start...
   Starting tasks and wait for 10 seconds...
   Task 2 ends.
   Task 3 ends.
   Task 0 ends.
   Task 1 ends.
   ...done.
   OK: testJavaRoundRobin
   Main thread starts sleeping for 1s..
   WaitMaxTimeThread starts sleeping for `Long.MAX_VALUE` milliseconds
   Main thread woke up!
   OK: testScheduleMaxTime
   -> Check isInReadOnlyMemory (LLBSP_IMPL_isInReadOnlyMemory validation)...
   Test synchronize on literal string
   Test synchronize on class
   Test multiple synchronize
   OK: testIsInReadOnlyMemory
   -> Check FPU (soft/hard FP option)...
   OK: testFPU
   -> Check floating-point parser...
   OK: testParseFP
   -> Check floating-point formatter...
   OK: testFormatFP
   -> Check parsing a string as a double ; in some systems such operations may allocate memory in the C heap (strtod, strtof, malloc implementation)...
   OK: testParseDoubleStringHeap
   Property 'com.microej.core.tests.monotonic.time.check.seconds' is not set (default to '60' seconds)
   -> Check monotonic time consistency for 60 seconds (LLMJVM_IMPL_getCurrentTime)...
   .............................
   OK: testMonotonicTimeIncreases
   -> Check current time clock tick duration (LLMJVM_IMPL_getCurrentTime, LLMJVM_IMPL_getTimeNanos)...
   Property 'com.microej.core.tests.max.allowed.clock.tick.duration.milliseconds' is not set (default to '20' millisecondss)
   Estimated LLMJVM_IMPL_getCurrentTime clock tick is 1 ms.
   Estimated LLMJVM_IMPL_getTimeNanos clock tick is lower than 30518 ns.
   OK: testSystemCurrentTimeClockTick
   -> Check schedule request clock tick duration (LLMJVM_IMPL_scheduleRequest)...
   Property 'com.microej.core.tests.max.allowed.clock.tick.duration.milliseconds' is not set (default to '20' millisecondss)
   Estimated LLMJVM_IMPL_scheduleRequest clock tick is 1 ms.
   OK: testScheduleRequestClockTick
   PASSED: 13
   VM END (exit code = 0)


Platform Test Suite Mode
~~~~~~~~~~~~~~~~~~~~~~~~

-  In MicroEJ SDK, import the ``java-testsuite-runner-core`` project in your workspace.

-  Follow the configuration and execution steps described in Platform Test Suites `documentation <../../README.rst>`_.

Dependencies
------------

*All dependencies are retrieved transitively by MicroEJ Module Manager*.

Troubleshooting
---------------

The test blocks during the Java round robin test under FreeRTOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Issue: 

- The test of ``LLMJVM_IMPL_scheduleRequest`` blocks at the following
  step: ``Starting tasks and wait for 10 seconds...``.

Solution: 

- Ensure the JVM native C task has a priority lower than the FreeRTOS
  timer task defined in ``FreeRTOSConfig.h`` (``configTIMER_TASK_PRIORITY``).

Platform Test Suite issues
~~~~~~~~~~~~~~~~~~~~~~~~~~

See Platform Test Suites `documentation <../../README.rst>`_.

Source
------

N/A

Restrictions
------------

None.

..
    Copyright 2020-2023 MicroEJ Corp. All rights reserved.
    Use of this source code is governed by a BSD-style license that can be found with this software.
